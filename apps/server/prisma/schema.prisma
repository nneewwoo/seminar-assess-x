datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          String       @id @default(uuid())
  givenName   String
  familyName  String
  email       String       @unique
  password    String
  address     String?
  phone       String?      @unique
  responses   Response[]
  votes       Vote[]
  attendances Attendance[]
  role        UserRoleType @default(USER)
  sessions    Session[]
}

model Otp {
  id      String @id @default(uuid())
  email   String @unique
  counter BigInt @default(0)
}

model Cycle {
  id          String        @id @default(uuid())
  month       Int
  year        Int
  active      Boolean       @default(true)
  seminars    Seminar[]
  responses   Response[]
  periods     CyclePeriod[]
  votes       Vote[]
  attendances Attendance[]
}

model Seminar {
  id            String       @id @default(uuid())
  title         String
  numberOfVotes Int          @default(0)
  cycle         Cycle        @relation(fields: [cycleId], references: [id])
  cycleId       String
  questions     Question[]
  course        String
  votes         Vote[]
  attendances   Attendance[]
}

model Question {
  id        String       @id @default(uuid())
  text      String
  type      QuestionType
  seminar   Seminar      @relation(fields: [seminarId], references: [id])
  seminarId String
  options   Option[]
  responses Response[]
}

model Option {
  id         String     @id @default(uuid())
  text       String
  isCorrect  Boolean
  question   Question   @relation(fields: [questionId], references: [id])
  questionId String
  responses  Response[]
}

model Response {
  id               String             @id @default(uuid())
  period           ResponsePeriodType
  user             User               @relation(fields: [userId], references: [id])
  userId           String
  question         Question           @relation(fields: [questionId], references: [id])
  questionId       String
  selectedOption   Option?            @relation(fields: [selectedOptionId], references: [id])
  selectedOptionId String?
  cycle            Cycle              @relation(fields: [cycleId], references: [id])
  cycleId          String

  @@unique([userId, cycleId, period])
}

model CyclePeriod {
  id            String          @id @default(uuid())
  currentPeriod CyclePeriodType
  cycle         Cycle           @relation(fields: [cycleId], references: [id])
  cycleId       String
  startedAt     DateTime        @default(now())
  endedAt       DateTime?

  @@unique([cycleId, currentPeriod])
}

model Vote {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  seminar   Seminar @relation(fields: [seminarId], references: [id])
  seminarId String
  cycle     Cycle   @relation(fields: [cycleId], references: [id])
  cycleId   String

  @@unique([userId, seminarId, cycleId])
}

model Attendance {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  seminar   Seminar @relation(fields: [seminarId], references: [id])
  seminarId String
  cycle     Cycle   @relation(fields: [cycleId], references: [id])
  cycleId   String
  attended  Boolean @default(false)

  @@unique([userId, seminarId, cycleId])
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum CyclePeriodType {
  VOTING
  PRE_TEST
  SEMINAR
  POST_TEST
  EVAL
  IDLE
}

enum ResponsePeriodType {
  VOTING
  PRE_TEST
  POST_TEST
  EVAL
}

enum QuestionType {
  MULTIPLE_CHOICE
  EVALUATION
}

enum UserRoleType {
  ADMIN
  USER
}
